require 'HTTPHeaders'
require 'net/http'
require 'CGI'
require 'nokogiri'

# The EventMachine server for the Card Editor backend
module EditorServer
	def receive_data(data)
		http = HTTPHeaders.new(data)

		methods = EditorServer.instance_methods - Object.instance_methods
		http.request.size.times { STDERR.print "-" }
		STDERR.puts ""
		STDERR.puts http.request
		http.request.size.times { STDERR.print "-" }
		STDERR.puts ""
		if methods.include?(http.url)
			self.send(http.url, http.body)
		else
			self.error("Unknown API call '#{http.url}'")
		end
		http.request.size.times { STDERR.print "-" }
		STDERR.puts ""
	end

	def error(message)
		response = HTTPMethodNotAllowed.new
		response.content = message

		self.send_data(response.to_s)
		STDERR.puts response
	end

	def saveas(body)
		form = CGI::parse(body)

		form["filename"][0] += ".card" if not form["filename"][0] =~ /\.card$/

		builder = Nokogiri::XML::Builder.new do |xml|
			xml << "<!-- Copyright Blazing Griffin 2012 -->"
			xml << "<!-- Generated by CardEditor -->"
			xml.card {
				xml.title {
					xml.cdata(form["title"])
				}
				xml.icon(:atlas => form["icon.atlas"], :key => form["icon.key"])
				xml.image(:atlas => form["image.atlas"], :key => form["image.key"])
				xml.text_ {
					xml.cdata(form["text"])
				}
				xml.tags {
					# Tags
					form.keys.reject { |x| not x =~ /^customTag(\d+)$/ }.each do |tag|
						attrs = {}
						form.keys.reject { |x| not x =~ /^key-#{tag}-(\d+)$/ }.each do |key|
							attrs[form[key][0]] = form[key.gsub(/^key/,"value")][0]
						end
						xml.send(form[tag][0], attrs)
					end

					# Scripts
					form.keys.reject { |x| not x =~ /^on[A-Z]/ }.each do |script|
						xml.send(script) {
							xml.cdata(form[script][0])
						} if form[script][0].size > 0
					end
				}
			}
		end

		response = HTTPOK.new
		response["Content-type"] = "text/xml"
		response.content = form["filename"][0] + " saved successfully!"

		self.send_data(response.to_s)
		fout = File.open(File.join("..","cards",form["filename"][0].split("/")),'w')
		fout.puts builder.to_xml
		fout.close
	end
end